/* automatically generated by rust-bindgen 0.63.0 */

#![allow(non_snake_case, non_camel_case_types, dead_code)]

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const ADFS_SUPER_MAGIC: u32 = 44533;
pub const AFFS_SUPER_MAGIC: u32 = 44543;
pub const AFS_SUPER_MAGIC: u32 = 1397113167;
pub const AUTOFS_SUPER_MAGIC: u32 = 391;
pub const CEPH_SUPER_MAGIC: u32 = 12805120;
pub const CODA_SUPER_MAGIC: u32 = 1937076805;
pub const CRAMFS_MAGIC: u32 = 684539205;
pub const CRAMFS_MAGIC_WEND: u32 = 1161678120;
pub const DEBUGFS_MAGIC: u32 = 1684170528;
pub const SECURITYFS_MAGIC: u32 = 1935894131;
pub const SELINUX_MAGIC: u32 = 4185718668;
pub const SMACK_MAGIC: u32 = 1128357203;
pub const RAMFS_MAGIC: u32 = 2240043254;
pub const TMPFS_MAGIC: u32 = 16914836;
pub const HUGETLBFS_MAGIC: u32 = 2508478710;
pub const SQUASHFS_MAGIC: u32 = 1936814952;
pub const ECRYPTFS_SUPER_MAGIC: u32 = 61791;
pub const EFS_SUPER_MAGIC: u32 = 4278867;
pub const EROFS_SUPER_MAGIC_V1: u32 = 3774210530;
pub const EXT2_SUPER_MAGIC: u32 = 61267;
pub const EXT3_SUPER_MAGIC: u32 = 61267;
pub const XENFS_SUPER_MAGIC: u32 = 2881100148;
pub const EXT4_SUPER_MAGIC: u32 = 61267;
pub const BTRFS_SUPER_MAGIC: u32 = 2435016766;
pub const NILFS_SUPER_MAGIC: u32 = 13364;
pub const F2FS_SUPER_MAGIC: u32 = 4076150800;
pub const HPFS_SUPER_MAGIC: u32 = 4187351113;
pub const ISOFS_SUPER_MAGIC: u32 = 38496;
pub const JFFS2_SUPER_MAGIC: u32 = 29366;
pub const XFS_SUPER_MAGIC: u32 = 1481003842;
pub const PSTOREFS_MAGIC: u32 = 1634035564;
pub const EFIVARFS_MAGIC: u32 = 3730735588;
pub const HOSTFS_SUPER_MAGIC: u32 = 12648430;
pub const OVERLAYFS_SUPER_MAGIC: u32 = 2035054128;
pub const FUSE_SUPER_MAGIC: u32 = 1702057286;
pub const MINIX_SUPER_MAGIC: u32 = 4991;
pub const MINIX_SUPER_MAGIC2: u32 = 5007;
pub const MINIX2_SUPER_MAGIC: u32 = 9320;
pub const MINIX2_SUPER_MAGIC2: u32 = 9336;
pub const MINIX3_SUPER_MAGIC: u32 = 19802;
pub const MSDOS_SUPER_MAGIC: u32 = 19780;
pub const EXFAT_SUPER_MAGIC: u32 = 538032816;
pub const NCP_SUPER_MAGIC: u32 = 22092;
pub const NFS_SUPER_MAGIC: u32 = 26985;
pub const OCFS2_SUPER_MAGIC: u32 = 1952539503;
pub const OPENPROM_SUPER_MAGIC: u32 = 40865;
pub const QNX4_SUPER_MAGIC: u32 = 47;
pub const QNX6_SUPER_MAGIC: u32 = 1746473250;
pub const AFS_FS_MAGIC: u32 = 1799439955;
pub const REISERFS_SUPER_MAGIC: u32 = 1382369651;
pub const REISERFS_SUPER_MAGIC_STRING: &[u8; 9usize] = b"ReIsErFs\0";
pub const REISER2FS_SUPER_MAGIC_STRING: &[u8; 10usize] = b"ReIsEr2Fs\0";
pub const REISER2FS_JR_SUPER_MAGIC_STRING: &[u8; 10usize] = b"ReIsEr3Fs\0";
pub const SMB_SUPER_MAGIC: u32 = 20859;
pub const CIFS_SUPER_MAGIC: u32 = 4283649346;
pub const SMB2_SUPER_MAGIC: u32 = 4266872130;
pub const CGROUP_SUPER_MAGIC: u32 = 2613483;
pub const CGROUP2_SUPER_MAGIC: u32 = 1667723888;
pub const RDTGROUP_SUPER_MAGIC: u32 = 124082209;
pub const STACK_END_MAGIC: u32 = 1470918301;
pub const TRACEFS_MAGIC: u32 = 1953653091;
pub const V9FS_MAGIC: u32 = 16914839;
pub const BDEVFS_MAGIC: u32 = 1650746742;
pub const DAXFS_MAGIC: u32 = 1684300152;
pub const BINFMTFS_MAGIC: u32 = 1112100429;
pub const DEVPTS_SUPER_MAGIC: u32 = 7377;
pub const BINDERFS_SUPER_MAGIC: u32 = 1819242352;
pub const FUTEXFS_SUPER_MAGIC: u32 = 195894762;
pub const PIPEFS_MAGIC: u32 = 1346981957;
pub const PROC_SUPER_MAGIC: u32 = 40864;
pub const SOCKFS_MAGIC: u32 = 1397703499;
pub const SYSFS_MAGIC: u32 = 1650812274;
pub const USBDEVICE_SUPER_MAGIC: u32 = 40866;
pub const MTD_INODE_FS_MAGIC: u32 = 288389204;
pub const ANON_INODE_FS_MAGIC: u32 = 151263540;
pub const BTRFS_TEST_MAGIC: u32 = 1936880249;
pub const NSFS_MAGIC: u32 = 1853056627;
pub const BPF_FS_MAGIC: u32 = 3405662737;
pub const AAFS_MAGIC: u32 = 1513908720;
pub const ZONEFS_MAGIC: u32 = 1515144787;
pub const UDF_SUPER_MAGIC: u32 = 352400198;
pub const BALLOON_KVM_MAGIC: u32 = 325456742;
pub const ZSMALLOC_MAGIC: u32 = 1479104553;
pub const DMA_BUF_MAGIC: u32 = 1145913666;
pub const DEVMEM_MAGIC: u32 = 1162691661;
pub const Z3FOLD_MAGIC: u32 = 51;
pub const PPC_CMM_MAGIC: u32 = 3344373136;
pub const SECRETMEM_MAGIC: u32 = 1397048141;
pub const USBDEVFS_MAXDRIVERNAME: u32 = 255;
pub const USBDEVFS_URB_SHORT_NOT_OK: u32 = 1;
pub const USBDEVFS_URB_ISO_ASAP: u32 = 2;
pub const USBDEVFS_URB_BULK_CONTINUATION: u32 = 4;
pub const USBDEVFS_URB_NO_FSBR: u32 = 32;
pub const USBDEVFS_URB_ZERO_PACKET: u32 = 64;
pub const USBDEVFS_URB_NO_INTERRUPT: u32 = 128;
pub const USBDEVFS_URB_TYPE_ISO: u32 = 0;
pub const USBDEVFS_URB_TYPE_INTERRUPT: u32 = 1;
pub const USBDEVFS_URB_TYPE_CONTROL: u32 = 2;
pub const USBDEVFS_URB_TYPE_BULK: u32 = 3;
pub const USBDEVFS_CAP_ZERO_PACKET: u32 = 1;
pub const USBDEVFS_CAP_BULK_CONTINUATION: u32 = 2;
pub const USBDEVFS_CAP_NO_PACKET_SIZE_LIM: u32 = 4;
pub const USBDEVFS_CAP_BULK_SCATTER_GATHER: u32 = 8;
pub const USBDEVFS_CAP_REAP_AFTER_DISCONNECT: u32 = 16;
pub const USBDEVFS_CAP_MMAP: u32 = 32;
pub const USBDEVFS_CAP_DROP_PRIVILEGES: u32 = 64;
pub const USBDEVFS_CAP_CONNINFO_EX: u32 = 128;
pub const USBDEVFS_CAP_SUSPEND: u32 = 256;
pub const USBDEVFS_DISCONNECT_CLAIM_IF_DRIVER: u32 = 1;
pub const USBDEVFS_DISCONNECT_CLAIM_EXCEPT_DRIVER: u32 = 2;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_ctrltransfer {
    pub bRequestType: __u8,
    pub bRequest: __u8,
    pub wValue: __u16,
    pub wIndex: __u16,
    pub wLength: __u16,
    pub timeout: __u32,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_usbdevfs_ctrltransfer() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_ctrltransfer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_ctrltransfer>(),
        24usize,
        concat!("Size of: ", stringify!(usbdevfs_ctrltransfer))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_ctrltransfer>(),
        8usize,
        concat!("Alignment of ", stringify!(usbdevfs_ctrltransfer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRequestType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_ctrltransfer),
            "::",
            stringify!(bRequestType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRequest) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_ctrltransfer),
            "::",
            stringify!(bRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wValue) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_ctrltransfer),
            "::",
            stringify!(wValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_ctrltransfer),
            "::",
            stringify!(wIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wLength) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_ctrltransfer),
            "::",
            stringify!(wLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_ctrltransfer),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_ctrltransfer),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_bulktransfer {
    pub ep: ::std::os::raw::c_uint,
    pub len: ::std::os::raw::c_uint,
    pub timeout: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_usbdevfs_bulktransfer() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_bulktransfer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_bulktransfer>(),
        24usize,
        concat!("Size of: ", stringify!(usbdevfs_bulktransfer))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_bulktransfer>(),
        8usize,
        concat!("Alignment of ", stringify!(usbdevfs_bulktransfer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ep) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_bulktransfer),
            "::",
            stringify!(ep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_bulktransfer),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_bulktransfer),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_bulktransfer),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_setinterface {
    pub interface: ::std::os::raw::c_uint,
    pub altsetting: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_usbdevfs_setinterface() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_setinterface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_setinterface>(),
        8usize,
        concat!("Size of: ", stringify!(usbdevfs_setinterface))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_setinterface>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_setinterface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_setinterface),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altsetting) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_setinterface),
            "::",
            stringify!(altsetting)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_disconnectsignal {
    pub signr: ::std::os::raw::c_uint,
    pub context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_usbdevfs_disconnectsignal() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_disconnectsignal> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_disconnectsignal>(),
        16usize,
        concat!("Size of: ", stringify!(usbdevfs_disconnectsignal))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_disconnectsignal>(),
        8usize,
        concat!("Alignment of ", stringify!(usbdevfs_disconnectsignal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_disconnectsignal),
            "::",
            stringify!(signr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_disconnectsignal),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_getdriver {
    pub interface: ::std::os::raw::c_uint,
    pub driver: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_usbdevfs_getdriver() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_getdriver> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_getdriver>(),
        260usize,
        concat!("Size of: ", stringify!(usbdevfs_getdriver))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_getdriver>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_getdriver))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_getdriver),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_getdriver),
            "::",
            stringify!(driver)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_connectinfo {
    pub devnum: ::std::os::raw::c_uint,
    pub slow: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_usbdevfs_connectinfo() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_connectinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_connectinfo>(),
        8usize,
        concat!("Size of: ", stringify!(usbdevfs_connectinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_connectinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_connectinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_connectinfo),
            "::",
            stringify!(devnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slow) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_connectinfo),
            "::",
            stringify!(slow)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_conninfo_ex {
    pub size: __u32,
    pub busnum: __u32,
    pub devnum: __u32,
    pub speed: __u32,
    pub num_ports: __u8,
    pub ports: [__u8; 7usize],
}
#[test]
fn bindgen_test_layout_usbdevfs_conninfo_ex() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_conninfo_ex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_conninfo_ex>(),
        24usize,
        concat!("Size of: ", stringify!(usbdevfs_conninfo_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_conninfo_ex>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_conninfo_ex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_conninfo_ex),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busnum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_conninfo_ex),
            "::",
            stringify!(busnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_conninfo_ex),
            "::",
            stringify!(devnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_conninfo_ex),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ports) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_conninfo_ex),
            "::",
            stringify!(num_ports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ports) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_conninfo_ex),
            "::",
            stringify!(ports)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_iso_packet_desc {
    pub length: ::std::os::raw::c_uint,
    pub actual_length: ::std::os::raw::c_uint,
    pub status: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_usbdevfs_iso_packet_desc() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_iso_packet_desc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_iso_packet_desc>(),
        12usize,
        concat!("Size of: ", stringify!(usbdevfs_iso_packet_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_iso_packet_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_iso_packet_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_iso_packet_desc),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actual_length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_iso_packet_desc),
            "::",
            stringify!(actual_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_iso_packet_desc),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
pub struct usbdevfs_urb {
    pub type_: ::std::os::raw::c_uchar,
    pub endpoint: ::std::os::raw::c_uchar,
    pub status: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub buffer: *mut ::std::os::raw::c_void,
    pub buffer_length: ::std::os::raw::c_int,
    pub actual_length: ::std::os::raw::c_int,
    pub start_frame: ::std::os::raw::c_int,
    pub __bindgen_anon_1: usbdevfs_urb__bindgen_ty_1,
    pub error_count: ::std::os::raw::c_int,
    pub signr: ::std::os::raw::c_uint,
    pub usercontext: *mut ::std::os::raw::c_void,
    pub iso_frame_desc: __IncompleteArrayField<usbdevfs_iso_packet_desc>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union usbdevfs_urb__bindgen_ty_1 {
    pub number_of_packets: ::std::os::raw::c_int,
    pub stream_id: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_usbdevfs_urb__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_urb__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_urb__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(usbdevfs_urb__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_urb__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_urb__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number_of_packets) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb__bindgen_ty_1),
            "::",
            stringify!(number_of_packets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb__bindgen_ty_1),
            "::",
            stringify!(stream_id)
        )
    );
}
#[test]
fn bindgen_test_layout_usbdevfs_urb() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_urb> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_urb>(),
        56usize,
        concat!("Size of: ", stringify!(usbdevfs_urb))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_urb>(),
        8usize,
        concat!("Alignment of ", stringify!(usbdevfs_urb))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_length) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb),
            "::",
            stringify!(buffer_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actual_length) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb),
            "::",
            stringify!(actual_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_frame) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb),
            "::",
            stringify!(start_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_count) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb),
            "::",
            stringify!(error_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signr) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb),
            "::",
            stringify!(signr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usercontext) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb),
            "::",
            stringify!(usercontext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iso_frame_desc) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_urb),
            "::",
            stringify!(iso_frame_desc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_ioctl {
    pub ifno: ::std::os::raw::c_int,
    pub ioctl_code: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_usbdevfs_ioctl() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_ioctl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_ioctl>(),
        16usize,
        concat!("Size of: ", stringify!(usbdevfs_ioctl))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_ioctl>(),
        8usize,
        concat!("Alignment of ", stringify!(usbdevfs_ioctl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_ioctl),
            "::",
            stringify!(ifno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ioctl_code) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_ioctl),
            "::",
            stringify!(ioctl_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_ioctl),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_hub_portinfo {
    pub nports: ::std::os::raw::c_char,
    pub port: [::std::os::raw::c_char; 127usize],
}
#[test]
fn bindgen_test_layout_usbdevfs_hub_portinfo() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_hub_portinfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_hub_portinfo>(),
        128usize,
        concat!("Size of: ", stringify!(usbdevfs_hub_portinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_hub_portinfo>(),
        1usize,
        concat!("Alignment of ", stringify!(usbdevfs_hub_portinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nports) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_hub_portinfo),
            "::",
            stringify!(nports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_hub_portinfo),
            "::",
            stringify!(port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbdevfs_disconnect_claim {
    pub interface: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub driver: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_usbdevfs_disconnect_claim() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_disconnect_claim> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_disconnect_claim>(),
        264usize,
        concat!("Size of: ", stringify!(usbdevfs_disconnect_claim))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_disconnect_claim>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_disconnect_claim))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_disconnect_claim),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_disconnect_claim),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_disconnect_claim),
            "::",
            stringify!(driver)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct usbdevfs_streams {
    pub num_streams: ::std::os::raw::c_uint,
    pub num_eps: ::std::os::raw::c_uint,
    pub eps: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_usbdevfs_streams() {
    const UNINIT: ::std::mem::MaybeUninit<usbdevfs_streams> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbdevfs_streams>(),
        8usize,
        concat!("Size of: ", stringify!(usbdevfs_streams))
    );
    assert_eq!(
        ::std::mem::align_of::<usbdevfs_streams>(),
        4usize,
        concat!("Alignment of ", stringify!(usbdevfs_streams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_streams) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_streams),
            "::",
            stringify!(num_streams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_eps) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_streams),
            "::",
            stringify!(num_eps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eps) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbdevfs_streams),
            "::",
            stringify!(eps)
        )
    );
}
